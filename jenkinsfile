pipeline {
    agent any

    environment {
        SONARQUBE_URL = "http://sonarqube:9000"
        SONARQUBE_TOKEN = credentials('SonarQube') // Asegúrate de que 'SonarQube' es el ID correcto en Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Wait for SonarQube') {
            steps {
                // Esperar 10 segundos para dar tiempo a SonarQube para arrancar completamente
                sh 'sleep 10'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // 'SonarQube' debe ser el nombre de la instalación de SonarQube en Jenkins
                    sh 'mvn sonar:sonar -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_TOKEN'
                }
            }
        }

        stage('Wait for Quality Gate') {
            steps {
                // Esperar 10 segundos para dar tiempo a Quality Gate
                sh 'sleep 10'
            }
        }

        stage('Check Quality Gate') {
            steps {
                script {
                    def qualityGate = waitUntilQualityGate abortPipeline: false
                    echo "Quality Gate status: ${qualityGate.status}"
                    echo "Quality Gate details: ${qualityGate}"

                    if (qualityGate.status != 'OK') {
                        echo "Quality Gate failed with status: ${qualityGate.status}"
                        echo "Quality Gate conditions:"
                        qualityGate.conditions.each { condition ->
                            echo "- ${condition.metricKey}: ${condition.status}"
                        }
                        error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                    } else {
                        echo "Quality Gate passed successfully"
                    }
                }
            }
        }
    }
}
