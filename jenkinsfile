pipeline {
    agent any

    environment {
        SONARQUBE_URL = "http://sonarqube:9000"
        SONARQUBE_TOKEN = credentials('SonarQube') // Asegúrate de que 'SonarQube' es el ID correcto en Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Wait for SonarQube') {
            steps {
                // Esperar 10 segundos para dar tiempo a SonarQube para arrancar completamente
                sh 'sleep 10'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // 'SonarQube' debe ser el nombre de la instalación de SonarQube en Jenkins
                    sh 'mvn sonar:sonar -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_TOKEN'
                }
            }
        }

        stage('Wait for Quality Gate') {
            steps {
                // Esperar 10 segundos para dar tiempo a Quality Gate
                sh 'sleep 10'
            }
        }

       stage('Quality Gate') {
            steps {
                script {
                    def maxAttempts = 10
                    def attempt = 1
                    def status = "NONE"
                    
                    while (status != "SUCCESS" && attempt <= maxAttempts) {
                        def response = sh(script: "curl -u ${SONARQUBE_TOKEN}: http://sonarqube:9000/api/qualitygates/project_status?projectKey=com.example:demo-app", returnStdout: true).trim()
                        status = sh(script: "echo '${response}' | jq -r .projectStatus.status", returnStdout: true).trim()
                        
                        if (status == "OK") {
                            echo "Quality Gate passed!"
                            break
                        } else if (status == "ERROR") {
                            error "Quality Gate failed!"
                        } else {
                            echo "Waiting for Quality Gate to complete. Attempt ${attempt}/${maxAttempts}"
                            sleep 30  // Espera 30 segundos antes de verificar de nuevo
                        }
                        
                        attempt++
                    }
                    
                    if (attempt > maxAttempts) {
                        error "Quality Gate did not complete in time"
                    }
                }
            }
        }
    }
}
